# Terraform TaskDef Vars Generator

## DescriÃ§Ã£o
Este projeto automatiza a criaÃ§Ã£o de variÃ¡veis para o Terraform a partir de entradas do usuÃ¡rio, gerando um arquivo formatado pronto para ser utilizado em definiÃ§Ãµes de Task Definition no AWS ECS.

## Como usar

### 1. Clone o repositÃ³rio:
```bash
git clone https://github.com/seu-usuario/Terraform-TaskDef-Vars-Generator.git
cd Terraform-TaskDef-Vars-Generator
```

### 2. DÃª permissÃ£o de execuÃ§Ã£o ao script
```bash
chmod +x run.sh
```# Terraform TaskDef Vars Generator

## DescriÃ§Ã£o
Este projeto automatiza a criaÃ§Ã£o de variÃ¡veis para o Terraform a partir de entradas do usuÃ¡rio, gerando um arquivo formatado pronto para ser utilizado em definiÃ§Ãµes de Task Definition no AWS ECS.

## Como usar

### 1. Clone o repositÃ³rio:
```bash
git clone https://github.com/seu-usuario/Terraform-TaskDef-Vars-Generator.git
cd Terraform-TaskDef-Vars-Generator
```

### 2. DÃª permissÃ£o de execuÃ§Ã£o ao script
```bash
chmod +x run.sh
```

### 3. Execute o script
```bash
./run.sh
```

### 4. Insira as variÃ¡veis no formato `key=value`
Digite suas variÃ¡veis e pressione **Enter** apÃ³s cada uma. Quando terminar, pressione **Enter** em uma linha vazia para finalizar.

Exemplo de entrada:
```
var1=value1
var2=value2
var3=value3
```

### 5. SaÃ­da gerada
O script criarÃ¡ um arquivo `terraform_vars.txt` com as variÃ¡veis formatadas:
```json
{
    name = "var1"
    value = "value1"
},
{
    name = "var2"
    value = "value2"
},
{
    name = "var3"
    value = "value3"
},
```

## Estrutura do Projeto
```
Terraform-TaskDef-Vars-Generator/
â”‚â”€â”€ main.py               # Script Python que processa as variÃ¡veis e gera o arquivo formatado
â”‚â”€â”€ run.sh                # Script Bash para coletar as variÃ¡veis do usuÃ¡rio e chamar o script Python
â”‚â”€â”€ vars.txt              # Armazena as variÃ¡veis temporariamente
â”‚â”€â”€ terraform_vars.txt    # Arquivo de saÃ­da com as variÃ¡veis formatadas
```

## Requisitos
- Python 3
- Bash

## PossÃ­veis Melhorias Futuras
- Adicionar suporte para exportar diretamente para um arquivo `.tfvars`
- Criar uma interface interativa para facilitar a inserÃ§Ã£o das variÃ¡veis

---
Com esse projeto, vocÃª pode facilitar a geraÃ§Ã£o de variÃ¡veis para o Terraform sem precisar formatÃ¡-las manualmente! ğŸš€



### 3. Execute o script
```bash
./run.sh
```

### 4. Insira as variÃ¡veis no formato `key=value`
Digite suas variÃ¡veis e pressione **Enter** apÃ³s cada uma. Quando terminar, pressione **Enter** em uma linha vazia para finalizar.

Exemplo de entrada:
```
var1=value1
var2=value2
var3=value3
```

### 5. SaÃ­da gerada
O script criarÃ¡ um arquivo `terraform_vars.txt` com as variÃ¡veis formatadas:
```json
{
    name = "var1"
    value = "value1"
},
{
    name = "var2"
    value = "value2"
},
{
    name = "var3"
    value = "value3"
},
```

## Estrutura do Projeto
```
Terraform-TaskDef-Vars-Generator/
â”‚â”€â”€ main.py               # Script Python que processa as variÃ¡veis e gera o arquivo formatado
â”‚â”€â”€ run.sh                # Script Bash para coletar as variÃ¡veis do usuÃ¡rio e chamar o script Python
â”‚â”€â”€ vars.txt              # Armazena as variÃ¡veis temporariamente
â”‚â”€â”€ terraform_vars.txt    # Arquivo de saÃ­da com as variÃ¡veis formatadas
```

## Requisitos
- Python 3
- Bash

## PossÃ­veis Melhorias Futuras
- Adicionar suporte para exportar diretamente para um arquivo `.tfvars`
- Criar uma interface interativa para facilitar a inserÃ§Ã£o das variÃ¡veis

---
Com esse projeto, vocÃª pode facilitar a geraÃ§Ã£o de variÃ¡veis para o Terraform sem precisar formatÃ¡-las manualmente! ğŸš€

